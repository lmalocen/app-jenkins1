<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发 on Jenkins X</title>
    <link>http://jenkins-x.io/zh/developing/</link>
    <description>Recent content in 开发 on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jenkins-x.io/zh/developing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>创建 Spring Boot</title>
      <link>http://jenkins-x.io/zh/developing/create-spring/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/create-spring/</guid>
      <description>如果你在开发基于Java的微服务，那么，你可能正在用流行的Spring Boot。
你可以利用Spring Boot Initializr创建Spring Boot应用，然后通过执行命令 jx import 来导入Jenkins X。
然而，另外一个快速自动化的方式，是通过执行 jx create spring 命令实现：
$ jx create spring -d web -d actuator 参数 -d 允许你指定希望添加到 Spring Boot 应用中的依赖。
我们强烈建议你总是包括依赖 actuator 到你的 Spring Boot 应用中，它可以为 Liveness and Readiness probes 提供健康检查。
命令 jx create spring 的步骤如下：
 在子目录中创建一个新的 Spring Boot 应用 把你的源码加入到git库中 在 git 服务，例如 GitHub,添加 git 远程库 推送代码到 git 远程库 添加默认的文件：  Dockerfile 把你的应用构建为 docker 镜像 Jenkinsfile 实现 CI / CD 流水线 在 Kubernetes 中通过 helm chart 运行你的应用  为你的 Jenkins 在 git 远程库上注册 webhook 为你的 Jenkins 添加 git 库 首次触发流水线  </description>
    </item>
    
    <item>
      <title>快速入门</title>
      <link>http://jenkins-x.io/zh/developing/create-quickstart/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/create-quickstart/</guid>
      <description>你可以由预制的应用开始一个项目，而不是从头开始。
你可以通过命令 jx create quickstart ，从我们预制的快速应用列表中创建一个新的应用。
$ jx create quickstart 然后，根据列表选择一个。
如果你清楚列表中你所需要的语言，可以进行如下过滤：
$ jx create quickstart -l go 或者使用文本过滤器对项目名称做过滤：
$ jx create quickstart -f http 当你选择快速入门时的细节 一旦你选择项目并命名后，下面的步骤会自动完成：
 在子目录中创建应用 把你的代码添加到 git 库中 在 git 服务上添加远程库，例如： GitHub 推送代码到远程库 添加默认文件：  Dockerfile to build your application as a docker image Dockerfile 把你的应用构建为 docker 镜像 Jenkinsfile to implement the CI / CD pipeline Jenkinsfile 实现 CI / CD 流水线 在 Kubernetes 中通过 helm chart 运行你的应用  为你的 Jenkins 在 git 远程库上注册 webhook 为你的 Jenkins 添加 git 库 首次触发流水线  快速入门的原理？ 快速入门的源码托管在 the jenkins-quickstarts Github organisation。</description>
    </item>
    
    <item>
      <title>导入</title>
      <link>http://jenkins-x.io/zh/developing/import/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/import/</guid>
      <description>If you already have some source code you wish to import into Jenkins X then you can use the jx import command. e.g.
$ cd my-cool-app $ jx import Import will perform the following actions (prompting you along the way):
 add your source code into a git repository if it isn&amp;rsquo;t already create a remote git repository on a git service, such as GitHub push your code to the remote git service add any required files to your project if they do not exist:  Dockerfile to build your application as a docker image Jenkinsfile to implement the CI / CD pipeline helm chart to run your application inside Kubernetes  register a webhook on the remote git repository to your teams Jenkins add the git repository to your teams Jenkins trigger the first pipeline  Avoiding docker + helm If you are importing a repository that does not create a docker image you can use the --no-draft command line argument which will not use Draft to default the Dockerfile and helm chart.</description>
    </item>
    
    <item>
      <title>浏览</title>
      <link>http://jenkins-x.io/zh/developing/browsing/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/browsing/</guid>
      <description>If you have used kubernetes before you&amp;rsquo;re probably used the kubectl command line to view kubernetes resources:
kubectl get pods The Jenkins X command line tool, jx, has a similar look and feel to kubectl and lets you get the status of all the Jenkins X resources.
View Jenkins Console If you are familiar with the Jenkins console then you can use jx console:
jx console to open it in a browser.</description>
    </item>
    
    <item>
      <title>Kubernetes Context</title>
      <link>http://jenkins-x.io/zh/developing/kube-context/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/kube-context/</guid>
      <description>The kubernetes CLI tool kubectl keeps track of the kubernetes cluster and namespace you are using via a local file ~/.kube/config (or a file at $KUBECONFIG).
If you want to change the namespace using the kubectl command line you can use:
kubectl config set-context`kubectl config current-context` --namespace=foo However jx provides lots of helper commands for changing clusters, namespaces or environments:
Changing Environments Use jx environment to switch environments
jx environment You will be presented with a list of the environments for the current team.</description>
    </item>
    
    <item>
      <title>Promote</title>
      <link>http://jenkins-x.io/zh/developing/promote/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/promote/</guid>
      <description>The CD Pipelines of Jenkins X automate the promotion of version changes through each Environment which is configured with a promotion strategy property of Auto. By default the Staging environment uses automatic promotion and the Production environment uses Manual promotion.
To manually Promote a version of your application to an environment use the jx promote command.
jx promote myapp --version 1.2.3 --env production The command waits for the promotion to complete, logging details of its progress.</description>
    </item>
    
    <item>
      <title>Preview</title>
      <link>http://jenkins-x.io/zh/developing/preview/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/preview/</guid>
      <description>We highly recommend the use of Preview Environments to get early feedback on changes to applications before the changes are merged into master.
Typically the creation of preview environments is automated inside the Pipelines created by Jenkins X.
However you can manually create a Preview Environment using jx via the jx preview command.
jx preview What happens when a Preview environment is created  a new Environment of kind Preview is created along with a kubernetes namespace which shows up in the jx get environments command along with the jx environment and jx namespace commands so you can see which preview environments are active and switch into them to look around the Pull Request is built as a preview docker image and chart and deployed into the preview environment a comment is added to the Pull Request to let your team know the preview application is ready for testing with a link to open the application.</description>
    </item>
    
    <item>
      <title>问题</title>
      <link>http://jenkins-x.io/zh/developing/issues/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/issues/</guid>
      <description>Jenkins X 默认使用你的 git 提供商中的问题跟踪系统来创建和浏览问题。
e.g. if you are inside the source code of a github project then you can type jx create issue:
jx create issue -t &amp;quot;lets make things more awesome&amp;quot;  And a new issue will be created on github.
You can list open the issues on your project via jx get issues:
jx get issues  使用不同的问题跟踪 If you wish to use, say, JIRA on a project you first need to add a JIRA service.</description>
    </item>
    
    <item>
      <title>Git 服务器</title>
      <link>http://jenkins-x.io/zh/developing/git/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/git/</guid>
      <description>Jenkins X defaults to using GitHub, the free public git hosting solution for open source projects.
However when working in the enterprise you may wish to use different git servers.
You can list the git servers configured via jx get git:
jx get git  Adding a new git provider If you already have a git server somewhere you can add it into Jenkins X via jx create git server:</description>
    </item>
    
  </channel>
</rss>