<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fundamentals on Jenkins X</title>
    <link>http://jenkins-x.io/zh/categories/fundamentals/</link>
    <description>Recent content in Fundamentals on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 21 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jenkins-x.io/zh/categories/fundamentals/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>入门</title>
      <link>http://jenkins-x.io/zh/getting-started/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/getting-started/</guid>
      <description>首先，需要在你本地的机器上安装 jx 命令行工具 。
你可以使用 jx 命令 来创建一个新的 kubernetes 集群 ，然后 Jenkins X 就会自动安装。
或者，如果你已经有了一个 kubernetes 集群，那么可以在你的 kubernetes 集群上安装 Jenkins X。</description>
    </item>
    
    <item>
      <title>Concepts</title>
      <link>http://jenkins-x.io/zh/about/concepts/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/about/concepts/</guid>
      <description>Jenkins X is designed to make it simple for developers to work to DevOps principles and best practices.
Principles &amp;ldquo;DevOps is a set of practices intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality.&amp;rdquo;
The goals of DevOps projects are:
 Faster time to market Improved deployment frequency Shorter time between fixes Lower failure rate of releases Faster Mean Time To Recovery  High performing teams should be able to deploy multiple times per day compared to the industry average that falls between once per week and once per month.</description>
    </item>
    
    <item>
      <title>Features</title>
      <link>http://jenkins-x.io/zh/about/features/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/about/features/</guid>
      <description>Command Line Jenkins X comes with a handy jx command line tool to easily:
 install Jenkins X inside your existing kubernetes cluster create a new kubernetes cluster and install Jenkins X into it import projects into Jenkins X and their Continuous Delivery pipelines setup create new Spring Boot applications which get imported into Jenkins X and their Continuous Delivery pipelines setup  Pipelines Rather than having to have deep knowledge of the internals of Jenkins Pipeline, Jenkins X will default awesome pipelines for your projects that implements fully CI and CD using DevOps best practices</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>http://jenkins-x.io/zh/contribute/roadmap/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/contribute/roadmap/</guid>
      <description>Feature Not Planned Planned In Progress Released     Operating Systems       macOs    1.1.x   Linux    1.1.x   Windows  Planned     Cloud Providers       AWS    1.1.x   Azure    1.1.x   EKS  Planned     GKE    1.</description>
    </item>
    
    <item>
      <title>创建 Spring Boot</title>
      <link>http://jenkins-x.io/zh/developing/create-spring/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/create-spring/</guid>
      <description>如果你在开发基于Java的微服务，那么，你可能正在用流行的Spring Boot。
你可以利用Spring Boot Initializr创建Spring Boot应用，然后通过执行命令 jx import 来导入Jenkins X。
然而，另外一个快速自动化的方式，是通过执行 jx create spring 命令实现：
$ jx create spring -d web -d actuator 参数 -d 允许你指定希望添加到 Spring Boot 应用中的依赖。
我们强烈建议你总是包括依赖 actuator 到你的 Spring Boot 应用中，它可以为 Liveness and Readiness probes 提供健康检查。
命令 jx create spring 的步骤如下：
 在子目录中创建一个新的 Spring Boot 应用 把你的源码加入到git库中 在 git 服务，例如 GitHub,添加 git 远程库 推送代码到 git 远程库 添加默认的文件：  Dockerfile 把你的应用构建为 docker 镜像 Jenkinsfile 实现 CI / CD 流水线 在 Kubernetes 中通过 helm chart 运行你的应用  为你的 Jenkins 在 git 远程库上注册 webhook 为你的 Jenkins 添加 git 库 首次触发流水线  </description>
    </item>
    
    <item>
      <title>快速入门</title>
      <link>http://jenkins-x.io/zh/developing/create-quickstart/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/developing/create-quickstart/</guid>
      <description>你可以由预制的应用开始一个项目，而不是从头开始。
你可以通过命令 jx create quickstart ，从我们预制的快速应用列表中创建一个新的应用。
$ jx create quickstart 然后，根据列表选择一个。
如果你清楚列表中你所需要的语言，可以进行如下过滤：
$ jx create quickstart -l go 或者使用文本过滤器对项目名称做过滤：
$ jx create quickstart -f http 当你选择快速入门时的细节 一旦你选择项目并命名后，下面的步骤会自动完成：
 在子目录中创建应用 把你的代码添加到 git 库中 在 git 服务上添加远程库，例如： GitHub 推送代码到远程库 添加默认文件：  Dockerfile to build your application as a docker image Dockerfile 把你的应用构建为 docker 镜像 Jenkinsfile to implement the CI / CD pipeline Jenkinsfile 实现 CI / CD 流水线 在 Kubernetes 中通过 helm chart 运行你的应用  为你的 Jenkins 在 git 远程库上注册 webhook 为你的 Jenkins 添加 git 库 首次触发流水线  快速入门的原理？ 快速入门的源码托管在 the jenkins-quickstarts Github organisation。</description>
    </item>
    
    <item>
      <title>示例</title>
      <link>http://jenkins-x.io/zh/demos/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/zh/demos/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>