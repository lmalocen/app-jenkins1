<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developing on Jenkins X</title>
    <link>http://jenkins-x.io/developing/</link>
    <description>Recent content in Developing on Jenkins X</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://jenkins-x.io/developing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create Spring Boot</title>
      <link>http://jenkins-x.io/developing/create-spring/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/developing/create-spring/</guid>
      <description>If you are developing Java microservices then you may well be using the popular Spring Boot.
You can create new Spring Boot applications using the Spring Boot Initializr and then import them into Jenkins X via the jx import command.
However another alternative is to use the jx create spring command which provides a fast automated path.
There is a demo of using the command: jx create spring or you can try it out yourself in a terminal:</description>
    </item>
    
    <item>
      <title>Create Quickstart</title>
      <link>http://jenkins-x.io/developing/create-quickstart/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/developing/create-quickstart/</guid>
      <description>Quickstarts are pre-made applications you can start a project from, instead of starting from scratch.
You can create new applications from our list of curated Quickstart applications via the jx create quickstart command.
$ jx create quickstart You are then prompted for a list of quickstarts to choose from.
If you know the language you wish to use you can filter the list of quickstarts shown via:
$ jx create quickstart -l go Or use a text filter to filter on the project names:</description>
    </item>
    
    <item>
      <title>Browsing</title>
      <link>http://jenkins-x.io/developing/browsing/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/developing/browsing/</guid>
      <description>If you have used kubernetes before you&amp;rsquo;re probably used the kubectl command line to view kubernetes resources:
kubectl get pods The Jenkins X command line tool, jx, has a similar look and feel to kubectl and lets you get the status of all the Jenkins X resources.
View Jenkins Console If you are familiar with the Jenkins console then you can use jx console:
jx console to open it in a browser.</description>
    </item>
    
    <item>
      <title>Import</title>
      <link>http://jenkins-x.io/developing/import/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/developing/import/</guid>
      <description>If you already have some source code you wish to import into Jenkins X then you can use the jx import command. e.g.
$ cd my-cool-app $ jx import Import will perform the following actions (prompting you along the way):
 add your source code into a git repository if it isn&amp;rsquo;t already create a remote git repository on a git service, such as GitHub push your code to the remote git service add any required files to your project if they do not exist:  Dockerfile to build your application as a docker image Jenkinsfile to implement the CI / CD pipeline helm chart to run your application inside Kubernetes  register a webhook on the remote git repository to your teams Jenkins add the git repository to your teams Jenkins trigger the first pipeline  Avoiding docker + helm If you are importing a repository that does not create a docker image you can use the --no-draft command line argument which will not use Draft to default the Dockerfile and helm chart.</description>
    </item>
    
    <item>
      <title>Kubernetes Context</title>
      <link>http://jenkins-x.io/developing/kube-context/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/developing/kube-context/</guid>
      <description>The kubernetes CLI tool kubectl keeps track of the kubernetes cluster and namespace you are using via a local file ~/.kube/config (or a file at $KUBECONFIG).
If you want to change the namespace using the kubectl command line you can use:
kubectl config set-context`kubectl config current-context` --namespace=foo However jx provides lots of helper commands for changing clusters, namespaces or environments:
Changing Environments Use jx environment to switch environments
jx environment You will be presented with a list of the environments for the current team.</description>
    </item>
    
    <item>
      <title>Promote</title>
      <link>http://jenkins-x.io/developing/promote/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/developing/promote/</guid>
      <description>The CD Pipelines of Jenkins X automate the promotion of version changes through each Environment which is configured with a promotion strategy property of Auto. By default the Staging environment uses automatic promotion and the Production environment uses Manual promotion.
To manually Promote a version of your application to an environment use the jx promote command.
jx promote myapp --version 1.2.3 --env production The command waits for the promotion to complete, logging details of its progress.</description>
    </item>
    
    <item>
      <title>Preview</title>
      <link>http://jenkins-x.io/developing/preview/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/developing/preview/</guid>
      <description>We highly recommend the use of Preview Environments to get early feedback on changes to applications before the changes are merged into master.
Typically the creation of preview environments is automated inside the Pipelines created by Jenkins X.
However you can manually create a Preview Environment using jx via the jx preview command.
jx preview What happens when a Preview environment is created  a new Environment of kind Preview is created along with a kubernetes namespace which shows up in the jx get environments command along with the jx environment and jx namespace commands so you can see which preview environments are active and switch into them to look around the Pull Request is built as a preview docker image and chart and deployed into the preview environment a comment is added to the Pull Request to let your team know the preview application is ready for testing with a link to open the application.</description>
    </item>
    
    <item>
      <title>Issues</title>
      <link>http://jenkins-x.io/developing/issues/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/developing/issues/</guid>
      <description>Jenkins X defaults to using the issue tracker in your git provider for creating and browsing issues.
e.g. if you are inside the source code of a github project then you can type jx create issue:
jx create issue -t &amp;quot;lets make things more awesome&amp;quot;  And a new issue will be created on github.
You can list open the issues on your project via jx get issues:
jx get issues  Using a different issue tracker If you wish to use, say, JIRA on a project you first need to add a JIRA service.</description>
    </item>
    
    <item>
      <title>Git Servers</title>
      <link>http://jenkins-x.io/developing/git/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://jenkins-x.io/developing/git/</guid>
      <description>Jenkins X defaults to using GitHub, the free public git hosting solution for open source projects.
However when working in the enterprise you may wish to use different git servers.
You can list the git servers configured via jx get git:
jx get git  Adding a new git provider If you already have a git server somewhere you can add it into Jenkins X via jx create git server:</description>
    </item>
    
  </channel>
</rss>